{"name": "ID:2 -- 正常登录获取token", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <testcases.test_runner.TestRunner object at 0x110a73a00>\ncase = {'check': 'code,msg', 'data': None, 'expected': '200,\"操作成功\"', 'feature': '登录', ...}\n\n        @pytest.mark.parametrize(\"case\", data)\n        def test_case(self, case):\n            \"\"\"\"\"\"\n            \"\"\"第四阶段：执行测试用例\n            建立测试函数内外all变量的对应关系，局部变量all指向 函数外 类属性self.all字典的引用\n    \n            首先使用jinjia2模块进行渲染测试用例 把其中{{}}的变量替换成all里面对应的值\n    \t        （数据依赖处理：先通过json提取数据到all里面 渲染 然后用eval转化成字典）\n    \n    \t    allure二次封装：通过allure.dynamic.feature/title(case[“feature”]) 让allure报告可以按照feature story分类\n    \t\t    以及在步骤之前使用@allure.step在allure报告添加测试步骤 以及使用allure.attach在具体步骤里添加附件）\n    \n            然后解析请求数据 把测试用例case字典里面键值对的value用eval从str变成字典 request能发送的格式(headers params data json file)\n    \t\t    组装并返回request需要的请求数据 method url headers params data json file\n    \n    \t\t然后用request方法发送http请求 传入解析出来的数据 返回一个response对象，并且封装到工具类 ; jdbc请求\n    \t\t（请求封装：先解析字典case中的请求字段 使用eval把字典里面headers params data json的value转化成字典\n    \n    \t\t然后发送http请求 使用字典解包\n    \t\t**requesdata 展开字典的key value去掉key的引号变成key=value的形式 作为参数传给函数\n    \t\t用requests.request发送http请求 返还一个response对象res\n    \n    \n            然后进行断言\n            json断言我二次封装了jsonpath，用了try来抓取异常 如果没有在响应数据里面没有找到\n    \t        （jsonpath二次封装：在响应断言中判断case[“check”]是否存在 不存在就判断expect是否在res.text里面，\n    \t        存在就使用二次封装的jsonpath把res.json(responsed变成dict)和check传入 提取res里面的目标字段\n    \t\tjsonpath二次封装让excel里的expect不用写$..code 通过jsonpath.jsonpath(case,f\"$..{name}\")\n    \t\t然后使用try expect如果jsonpath没有找到抓取异常把result=false 判断result的值为false的话输出查找失败）\n    \n            数据库断言就是创建数据库连接 创建游标 执行sql\n    \n        提取分为数据库提取和json提取\n        我还写了验证码识别的工具类，验证码一般都是base64，我先把他用，分割得到后面的编码部分，用pil模块转化成图片数据 然后用dddocr进行识别\n    \t\t\t(接口自动化中日志处理模块\n    \t\t\t\t在pytest.ini里配置log保存路径(log_file=) 级别(log_file_level=info) 格式 (log_file_format)\n    \t\t\t\t测试函数里使用logging.info()\n    \t\t\t接口自动化中ORC识别\n    \t\t\t\t验证码图片通常是 Base64 编码\n    \t\t\t\t先从逗号分割保留 Base64编码部分\n    \t\t\t\t解码然后用pil转化为图片格式\n    \t\t\t\t然后用ddddocr进行orc识别 提取验证码字符\n    \t\t\t接口自动化中数据库连接)\"\"\"\n            # print(\"case=\", case, \"\\ntype-case=\", type(case))\n            \"\"\"\n            建立测试函数内外all变量的对应关系，局部变量all指向 函数外 类属性self.all字典的引用\n                如果在实例中赋值 self.all 其会生成实例属性 并遮蔽掉类属性all 访问self.all是访问实例属性\n                    self.all = {\"user_id\": \"1001\"}  # 这样就变成实例属性\n                    print(self.all)  # 访问的是实例属性，不再访问类属性\n            \"\"\"\n            all = self.all\n            \"\"\"\n            ✅ 渲染测试用例 如果 case 里有 {{变量}}，会替换成 all 里的值\n            Template(str(case)).render(all) 替换case里{{变量}}的占位符\n                case = {'json': '{\"uuid\":\"{{uuid}}\",\"code\":\"2\"}'}\n                all = {'uuid': 'e4d21f5e3a93441da4c76428c97e937c'}\n                case = '{\"uuid\":\"e4d21f5e3a93441da4c76428c97e937c\"}'\n            eval让case从 str - dict (因为渲染的时候把case变成str了)\n              eval() 本质： 执行str字符串形式的Python表达式(str像什么)，并返回结果\n                如果字符串像 字典 → 解析成 dict\n                如果字符串像 列表 → 解析成 list\n    \t        如果字符串像 数学表达式 → 计算结果\n    \t        如果字符串像 函数调用 → 执行函数\n    \t        只能执行单行表达式 不能赋值 导入\n            \"\"\"\n            case = eval(Template(str(case)).render(all))\n            # print(\"case2=\", case, \"\\ntype-case2=\", type(case))\n            # 初始化allure报告\n            \"\"\"让allure报告有清晰的分组\"\"\"\n            allure_init(case)\n            \"\"\"\n            ✅ pytest 在终端输出测试用例信息。\n            打印测试用例的信息到日志（log 文件）和终端，方便调试和分析测试过程。\n             f\"...\" 是 Python 的 格式化字符串（f-string）\n             f 会把 case 里的值填充进去\n             INFO -- 0.用例ID:1 模块:登录 场景:验证码 标题:成功获取验证码\n    \t    \"\"\"\n            # 0.测试用例的描述信息日志\n            logging.info(f\"0.用例ID:{case['id']} 模块:{case['feature']} 场景:{case['story']} 标题:{case['title']}\")\n            \"\"\"\n            ✅ 解析 提取 API 请求数据\"\"\"\n            request_data = analyse_case(case)\n            \"\"\"\n            ✅ 用 requests 发送 API 请求，并获取 HTTP 响应。\"\"\"\n            res = send_http_request(**request_data)\n            # 核心步骤3: 处理断言\n            \"\"\"\n            ✅ 响应断言 检查 response.status_code 和 response.json() 是否符合预期\"\"\"\n>           http_assert(case, res)\n\ntestcases/test_runner.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/asserts.py:51: in http_assert\n    obj_processor(case).http_assert(case, res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.asserts.SingleAssert object at 0x1062d6ca0>\ncase = {'check': 'code,msg', 'data': None, 'expected': '200,\"操作成功\"', 'feature': '登录', ...}\nres = {'json_data': {'code': 200, 'msg': '操作成功', 'token': 'eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjhhZTZkODI4LTY2MTkt...7_WJqH90DEt4dcwejZbPLQS4J5Ps85yjS2McA7kTi6yBYH-ez8NOkmjZ_wQ7t4jcUQ8XWA'}, 'response_time': 270.489, 'status_code': 200}\n\n    @allure.step(\"3.HTTP响应断言\")\n    def http_assert(self, case, res):\n        if case[\"check\"]:\n            # result = jsonpath.jsonpath(res.json(), case[\"check\"])[0]\n            # 状态码：200 404 302 500 502\n            # 部分接口：重定向  302\n            result = GetKeywords.get_keyword(res, case[\"check\"])\n            logging.info(f\"3.HTTP响应断言内容: 实际结果({result}) == 预期结果({case['expected']})\")\n>           assert result == case[\"expected\"]\nE           AssertionError\n\nutils/asserts.py:64: AssertionError"}, "steps": [{"name": "1.解析请求数据", "status": "passed", "attachments": [{"name": "解析数据结果", "source": "9952e90c-df1e-4491-83dc-a4372d297db9-attachment.attach"}], "parameters": [{"name": "case", "value": "{'id': 2, 'feature': '登录', 'story': '登录', 'title': '正常登录获取token', 'method': 'post', 'path': '/login', 'headers': '{\"content-type\":\"application/json;charset=UTF-8\"}', 'params': None, 'data': None, 'json': '{\"password\":\"e10adc3949ba59abbe56e057f20f883e\",\"username\":\"admin\",\"uuid\":\"None\",\"code\":\"2\"}', 'files': None, 'check': 'code,msg', 'expected': '200,\"操作成功\"', 'sql_check': None, 'sql_expected': None, 'jsonExData': '{\"token\":\"token\"}', 'sqlExData': None, 'reExData': None, 'is_true': True}"}], "start": 1748848526300, "stop": 1748848526300}, {"name": "2.发送HTTP请求", "status": "passed", "parameters": [{"name": "method", "value": "'post'"}, {"name": "url", "value": "'http://60.204.225.104:9632/login'"}, {"name": "headers", "value": "{'content-type': 'application/json;charset=UTF-8'}"}, {"name": "params", "value": "None"}, {"name": "data", "value": "None"}, {"name": "json", "value": "{'password': 'e10adc3949ba59abbe56e057f20f883e', 'username': 'admin', 'uuid': 'None', 'code': '2'}"}, {"name": "files", "value": "None"}], "start": 1748848526300, "stop": 1748848529581}, {"name": "3.HTTP响应断言", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"/opt/homebrew/lib/python3.9/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/chu/Desktop/Inter/utils/asserts.py\", line 64, in http_assert\n    assert result == case[\"expected\"]\n"}, "parameters": [{"name": "case", "value": "{'id': 2, 'feature': '登录', 'story': '登录', 'title': '正常登录获取token', 'method': 'post', 'path': '/login', 'headers': '{\"content-type\":\"application/json;charset=UTF-8\"}', 'params': None, 'data': None, 'json': '{\"password\":\"e10adc3949ba59abbe56e057f20f883e\",\"username\":\"admin\",\"uuid\":\"None\",\"code\":\"2\"}', 'files': None, 'check': 'code,msg', 'expected': '200,\"操作成功\"', 'sql_check': None, 'sql_expected': None, 'jsonExData': '{\"token\":\"token\"}', 'sqlExData': None, 'reExData': None, 'is_true': True}"}, {"name": "res", "value": "{'status_code': 200, 'json_data': {'msg': '操作成功', 'code': 200, 'token': 'eyJhbGciOiJIUzUxMiJ9.eyJsb2dpbl91c2VyX2tleSI6IjhhZTZkODI4LTY2MTktNDkwZS05YTA1LTMxMTQzNGZmYjg5NCJ9.u0cyCgMH-Ufi3iCc7_WJqH90DEt4dcwejZbPLQS4J5Ps85yjS2McA7kTi6yBYH-ez8NOkmjZ_wQ7t4jcUQ8XWA'}, 'response_time': 270.489}"}], "start": 1748848529582, "stop": 1748848529583}], "attachments": [{"name": "log", "source": "81d9e637-dcb0-4228-a169-077abe3989c7-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'id': 2, 'feature': '登录', 'story': '登录', 'title': '正常登录获取token', 'method': 'post', 'path': '/login', 'headers': '{\"content-type\":\"application/json;charset=UTF-8\"}', 'params': None, 'data': None, 'json': '{\"password\":\"e10adc3949ba59abbe56e057f20f883e\",\"username\":\"admin\",\"uuid\":\"{{uuid}}\",\"code\":\"2\"}', 'files': None, 'check': 'code,msg', 'expected': '200,\"操作成功\"', 'sql_check': None, 'sql_expected': None, 'jsonExData': '{\"token\":\"token\"}', 'sqlExData': None, 'reExData': None, 'is_true': True}"}], "start": 1748848526299, "stop": 1748848529586, "uuid": "959558f6-087c-400a-a616-0f1ac31b577a", "historyId": "242dbaa92390545728d78fbdf89f274a", "testCaseId": "f4c9a5433c9d0f70aa3669f0895ebca2", "fullName": "testcases.test_runner.TestRunner#test_case", "labels": [{"name": "feature", "value": "登录"}, {"name": "story", "value": "登录"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_runner"}, {"name": "subSuite", "value": "TestRunner"}, {"name": "host", "value": "chudeMacBook-Air.local"}, {"name": "thread", "value": "89089-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_runner"}]}