[pytest]
;配置默认参数 + 指定测试用例目录 文件 类 函数

;addopts：pytest自动带上的参数 -打印详细信息 生成报告 选择用例 多线程 重跑
;allure：
;pytest 执行测试前，清空 ./reports/目录
;--clean-alluredir
;pytest在指定目录里生成.json 结果文件
;--alluredir=./reports/allure-results
;allure generate reports/allure-results -o reports/allure-reports --clean
;只运行-m后面标记的用例
;pytest-xdist插件 多线程 -n
;--reruns 失败重跑

addopts =
          -vs
          --clean-alluredir
          --alluredir=./reports/allure-results
          ;--html=./reports/reports.html
;          -m "login_test"
          ;-m "smoke or login_test"
;          -n 2
;          --reruns=0

;用例上面 @pytest.mark.标签名 ，标签名:说明
;markers =
;    smoke: 冒烟用例
;    test: 仅供调试的用例
;    testNow: marks tests as testNow
;    test1 : temporary test
;    test2 : temporary test
;    login_test : temporary test
;
;minversion = 5.0
;
;pytest在该 目录 下查找测试用例
;testpaths =./cases/

;pytest识别该形式的 文件 作为测试文件
;python_files = test_*.py

;pytest识别该形式的 类 作为测试类
;python_classes = Test*

;pytest识别该形式的 函数 作为用例
;python_functions = test_*

;	•	指定日志文件存放路径（相对路径 ./log/test.log）
;	•	pytest 运行时，会自动创建 log/test.log 文件，并将日志写入其中。
log_file = ./log/test.log
;	•	日志级别：info 级别以上的日志才会写入 test.log。
;	•	pytest 运行时，debug 以下的日志不会写入。
log_file_level = info
;	•	日志格式，规定每一行日志的显示格式：
;	•	%(asctime)s → 时间
;	•	%(filename)-16s → 文件名
;	•	%(funcName)-18s → 函数名
;	•	%(lineno)-3d → 行号
;	•	%(levelname)s → 日志级别
;	•	%(message)s → 日志内容
log_file_format = %(asctime)s %(filename)-16s [函数:%(funcName)-18s] [line:%(lineno)-3d] %(levelname)s -- %(message)s
;	•	设置 日志时间格式：
log_file_date_format = %Y-%m-%d %H:%M:%S

;	•	让日志在 pytest 运行时，实时输出到终端（控制台）。
log_cli = True
;	•	设置终端日志级别，info 级别以上的日志才会显示在终端。
log_cli_level = info
;	•	控制终端日志格式（和 log_file_format 类似）。
log_cli_format = %(asctime)s %(filename)-16s [函数:%(funcName)-18s] [line:%(lineno)-3d] %(levelname)s -- %(message)s
;	•	控制终端日志时间格式。
log_cli_date_format = %Y-%m-%d %H:%M:%S

;✅ 终端（控制台）输出
;2025-03-08 14:23:45 test_runner.py   [函数:test_case         ] [line:32 ] INFO -- 0.用例ID:1 模块:登录 场景:验证码 标题:成功获取验证码
;✅ log/test.log 文件内容
;2025-03-08 14:23:45 test_runner.py   [函数:test_case         ] [line:32 ] INFO -- 0.用例ID:1 模块:登录 场景:验证码 标题:成功获取验证码